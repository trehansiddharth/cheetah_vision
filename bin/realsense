#!/usr/bin/env python3
import realsense
import numpy as np
import lcmutils
from lcm_types.pose_t import pose_t
from lcm_types.pointcloud_t import pointcloud_t
from lcm_types.image_t import image_t
from lcm_types.state_estimate_t import state_estimate_t
import transformation
import quaternion
import optparse

if __name__ == "__main__":
    help_text = ("Connects to the Realsense camera with librealsense2 API, runs visual "
    "SLAM with ORB_SLAM2 API, and publishes pose, image, and pointcloud over LCM.")

    parser = optparse.OptionParser(description=help_text)

    parser.add_option("-u", "--url", dest="url", help="Publish packets to LCMURL", metavar="LCMURL", default=None)
    parser.add_option("-c", "--config", dest="config", help="Read Realsense and ORBSLAM config from CONFIGFILE", metavar="CONFIGFILE")
    parser.add_option("-v", "--vocabulary", dest="vocabulary", help="Read ORBSLAM vocabulary from VOCABFILE", metavar="VOCABFILE")
    parser.add_option("-p", "--pose", dest="pose", help="Publish pose to POSECHANNEL", metavar="POSECHANNEL", default="REALSENSE_POSE")
    parser.add_option("-t", "--pointcloud", dest="pointcloud", help="Publish pointcloud to POINTCLOUDCHANNEL", metavar="POINTCLOUDCHANNEL", default="REALSENSE_POINTCLOUD")
    parser.add_option("-i", "--image", dest="image", help="Publish RGB image to IMAGECHANNEL", metavar="IMAGECHANNEL", default="REALSENSE_IMAGE")
    parser.add_option("-d", "--debug", dest="debug", help="Enable debug mode (don't wait for cheetah communications)", action="store_true")

    (options, args) = parser.parse_args()

    node = lcmutils.node(options.url)

    realsense_basis = transformation.Transformation(
        q = quaternion.from_float_array([0.4784, 0.5158, 0.5264, 0.4790]),
        t = np.array([0.4041, -0.0778, -0.0698]))
    realsense_ref = None
    cheetah_T = None

    if not options.debug:
        def cheetah_callback(msg):
            global cheetah_T
            cheetah_T = transformation.Transformation(
                q = quaternion.from_float_array(msg.quat),
                t = np.array(msg.p0))

        cheetah_subscription = lcmutils.subscribe(node, "CHEETAH_state_estimate", state_estimate_t, cheetah_callback, verbose=False)

    camera = realsense.RealsenseCamera(options.config, options.vocabulary)
    camera.initialize()
    pose = None
    while pose is None:
        timestamp, pose, points, color = camera.get_scene()
    if not options.debug:
        node.handle()
        realsense_ref = cheetah_T * pose.change_basis(realsense_basis).inverse()
        lcmutils.unsubscribe(node, cheetah_subscription)
    while True:
        timestamp, pose, points, color = camera.get_scene()
        if pose is not None:
            if options.debug:
                realsense_T = pose.change_basis(realsense_basis)
            else:
                realsense_T = realsense_ref * pose.change_basis(realsense_basis)
            msg = pose_t()
            msg.timestamp = timestamp
            arr = realsense_T.as_array().astype("float32")
            msg.orientation = arr[:4]
            msg.position = arr[4:]
            node.publish(options.pose, msg.encode())
            if points is not None:
                msg = pointcloud_t()
                msg.timestamp = timestamp
                msg.n = points.size
                msg.points = (realsense_basis * points).astype("float32").reshape(-1)
                node.publish(options.pointcloud, msg.encode())
        if color is not None:
            msg = image_t()
            msg.timestamp = timestamp
            msg.format = "rgb"
            msg.height = color.shape[0]
            msg.width = color.shape[1]
            msg.n = color.size
            msg.data = color.tobytes()
            node.publish(options.image, msg.encode())

