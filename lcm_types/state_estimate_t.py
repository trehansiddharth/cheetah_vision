"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class state_estimate_t(object):
    __slots__ = ["quat", "rpy", "p0", "v0", "pfoot", "stds", "gyro", "accelerometer", "raw_gyro", "contact_state"]

    def __init__(self):
        self.quat = [ 0.0 for dim0 in range(4) ]
        self.rpy = [ 0.0 for dim0 in range(3) ]
        self.p0 = [ 0.0 for dim0 in range(3) ]
        self.v0 = [ 0.0 for dim0 in range(3) ]
        self.pfoot = [ 0.0 for dim0 in range(12) ]
        self.stds = [ 0.0 for dim0 in range(18) ]
        self.gyro = [ 0.0 for dim0 in range(3) ]
        self.accelerometer = [ 0.0 for dim0 in range(3) ]
        self.raw_gyro = [ 0.0 for dim0 in range(3) ]
        self.contact_state = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(state_estimate_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4d', *self.quat[:4]))
        buf.write(struct.pack('>3d', *self.rpy[:3]))
        buf.write(struct.pack('>3d', *self.p0[:3]))
        buf.write(struct.pack('>3d', *self.v0[:3]))
        buf.write(struct.pack('>12d', *self.pfoot[:12]))
        buf.write(struct.pack('>18d', *self.stds[:18]))
        buf.write(struct.pack('>3d', *self.gyro[:3]))
        buf.write(struct.pack('>3d', *self.accelerometer[:3]))
        buf.write(struct.pack('>3d', *self.raw_gyro[:3]))
        buf.write(struct.pack('>4d', *self.contact_state[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_estimate_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_estimate_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = state_estimate_t()
        self.quat = struct.unpack('>4d', buf.read(32))
        self.rpy = struct.unpack('>3d', buf.read(24))
        self.p0 = struct.unpack('>3d', buf.read(24))
        self.v0 = struct.unpack('>3d', buf.read(24))
        self.pfoot = struct.unpack('>12d', buf.read(96))
        self.stds = struct.unpack('>18d', buf.read(144))
        self.gyro = struct.unpack('>3d', buf.read(24))
        self.accelerometer = struct.unpack('>3d', buf.read(24))
        self.raw_gyro = struct.unpack('>3d', buf.read(24))
        self.contact_state = struct.unpack('>4d', buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if state_estimate_t in parents: return 0
        tmphash = (0xec9e30953794dac3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if state_estimate_t._packed_fingerprint is None:
            state_estimate_t._packed_fingerprint = struct.pack(">Q", state_estimate_t._get_hash_recursive([]))
        return state_estimate_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

